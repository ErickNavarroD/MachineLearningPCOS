---
title: "Pima data"
author: "Aline Talhouk"
date: "2023-01-13"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## The PIMA dataset
For this example we will use the Pima dataset, included in the MASS library:

>A population of women who were at least 21 years old, of Pima Indian heritage and living near Phoenix, Arizona, was tested for diabetes according to World Health Organization criteria. The data were collected by the US National Institute of Diabetes and Digestive and Kidney Diseases. We used the 532 complete records after dropping the (mainly missing) data on serum insulin.

The dataset includes the following variables:


1	Number of times pregnant
2	Plasma glucose concentration (glucose tolerance test)
3	Diastolic blood pressure (mm Hg)
4	Triceps skin fold thickness (mm)
5	2-Hour serum insulin (mu U/ml)
6	Body mass index (weight in kg/(height in m)^2)
7	Diabetes pedigree function
8	Age (years)
9	Class variable (test for diabetes)

The outcome variable is type, indicating whether a person has diabetes. 

The data is split into a train and test set, which we will combine together.
```{r}
library(tidyverse)
library(mlbench)
library(caret)
library(pROC)
data("PimaIndiansDiabetes")
PimaIndiansDiabetes$glucose <- ifelse(PimaIndiansDiabetes$glucose ==  0, NA, PimaIndiansDiabetes$glucose)
PimaIndiansDiabetes$pressure <- ifelse(PimaIndiansDiabetes$pressure ==  0, NA, PimaIndiansDiabetes$pressure)
PimaIndiansDiabetes$triceps <- ifelse(PimaIndiansDiabetes$triceps ==  0, NA, PimaIndiansDiabetes$triceps)
PimaIndiansDiabetes$triceps <- ifelse(PimaIndiansDiabetes$triceps == 99, NA, PimaIndiansDiabetes$triceps)
PimaIndiansDiabetes$insulin <- ifelse(PimaIndiansDiabetes$insulin ==  0, NA, PimaIndiansDiabetes$insulin)
PimaIndiansDiabetes$mass <- ifelse(PimaIndiansDiabetes$mass ==  0, NA, PimaIndiansDiabetes$mass)

set.seed(123)
train.index <- caret::createDataPartition(PimaIndiansDiabetes$diabetes, p = .8, list=FALSE)

train <- PimaIndiansDiabetes[ train.index,]
valid  <- PimaIndiansDiabetes[-train.index,]

```

# Missing Value Analysis
```{r}

# Check the missing values in the data
summary(train)
sapply(train, function(x) sum(is.na(x)))
dim (train)



MP_plot_train <- VIM::aggr(train, col=c('red','blue'),
                       numbers=TRUE, sortVars=TRUE,
                       labels=names(train), cex.axis=.7,
                       gap=3, ylab=c("Proportion of Missing Data","Pattern"))

```
## Deletion Methods
Require the data to be MCAR
In listwise deletion a case is dropped from an analysis because it has a missing value in at least one of the specified variables. The analysis is only run on cases which have a complete set of data.


```{r}
# Listwise deletion: Remove  the rows where missing values occur. 
listwise_train <- train[complete.cases(train),]
sapply(listwise_train, function(x) sum(is.na(x)))
dim(listwise_train)
mean(listwise_train$glucose)

```
Pairwise deletion (available-case analysis) attempts to minimize the loss that occurs in listwise deletion.  

```{r}
#	Pairwise deletion: ignore missing values
mean(train$glucose, na.rm=TRUE)
mean(train$glucose)

#number of obeservations removed
sum(complete.cases(train)==FALSE)
#number of observations missing for glucose is 4

```

## Imputation methods
The mean imputation method replaces missing values on a variable by the mean of observed values of that variable. This method leads to unbiased parameter estimates under the assumption of MCAR.

```{r}
Mean_train <- mice::mice(train, m=5, method = 'mean')
mice::densityplot(Mean_train)

MeanData_train<-complete(data=Mean_train)
dim(MeanData_train)
mean(MeanData_train$glucose)
```
```{r}
pmm_train <- mice::mice(train, method = "pmm")

mice::densityplot(pmm_train)

```

```{r}
# Multiple imputation by chained equations
chained_train <- mice::mice(train)
mice::densityplot(chained_train)

```
# Class Imbalance
```{r}
completeData<-complete(data=pmm_train)
table(completeData$diabetes)
sapply(valid, function(x) sum(is.na(x)))
completeValid <- valid[complete.cases(valid),]
table(completeValid$diabetes)
```

```{r}
ctrl <- trainControl(method = "repeatedcv",
                     number = 10,
                     repeats = 5,
                     summaryFunction = twoClassSummary,
                     classProbs = TRUE)

set.seed(5627)

orig_fit <- train(diabetes ~ .,
                  data = completeData,
                  method = "gbm",
                  verbose = FALSE,
                  metric = "ROC",
                  trControl = ctrl)

# Build custom AUC function to extract AUC
# from the caret model object

test_roc <- function(model, data) {
  
  roc(data$diabetes,
      predict(model, data, type = "prob")[, "pos"])

}


pred_original <- predict(orig_fit, completeValid)
cm_orig <- confusionMatrix(pred_original, completeValid$diabetes, positive="pos")
result_orig <- c(cm_orig$overall["Accuracy"],cm_orig$byClass['Sensitivity'], cm_orig$byClass['Specificity'], cm_orig$byClass['F1'])
result_orig

test_roc(orig_fit,  completeValid) %>% auc()

```

```{r}
set.seed(5627)

ctrl$sampling <- "down"

down_fit <- train(diabetes ~ .,
                  data = completeData,
                  method = "gbm",
                  verbose = FALSE,
                  metric = "ROC",
                  trControl = ctrl)

pred_down <- predict(down_fit, completeValid)
cm_down <- confusionMatrix(pred_down, completeValid$diabetes, positive="pos")
result_down <- c(cm_down$overall["Accuracy"],cm_down$byClass['Sensitivity'], cm_down$byClass['Specificity'],  cm_down$byClass['F1'])
result_down


all_results <- data.frame(rbind(result_orig, result_down))
all_results

```
```{r}
set.seed(5627)

ctrl$sampling <- "up"

up_fit <- train(diabetes ~ .,
                  data = completeData,
                  method = "gbm",
                  verbose = FALSE,
                  metric = "ROC",
                  trControl = ctrl)

pred_up <- predict(up_fit, completeValid)
cm_up <- confusionMatrix(pred_up, completeValid$diabetes, positive="pos")
result_up <- c(cm_up$overall["Accuracy"],cm_up$byClass['Sensitivity'], cm_up$byClass['Specificity'],  cm_up$byClass['F1'])
result_up


all_results <- data.frame(rbind(result_orig, result_down, result_up))
all_results
```
```{r}
set.seed(5627)

ctrl$sampling <- "smote"

smote_fit <- train(diabetes ~ .,
                  data = completeData,
                  method = "gbm",
                  verbose = FALSE,
                  metric = "ROC",
                  trControl = ctrl)

pred_smote <- predict(smote_fit, completeValid)
cm_smote <- confusionMatrix(pred_smote, completeValid$diabetes, positive="pos")
result_smote <- c(cm_smote$overall["Accuracy"],cm_smote$byClass['Sensitivity'], cm_smote$byClass['Specificity'],  cm_smote$byClass['F1'])
result_smote


all_results <- data.frame(rbind(result_orig, result_down, result_up, result_smote))
all_results
```
```{r}
model_list <- list(original = orig_fit,
                   down = down_fit,
                   up = up_fit,
                   SMOTE = smote_fit)

model_list_roc <- model_list %>%
  map(test_roc, data = completeValid)

model_list_roc %>%
  map(auc)
```

