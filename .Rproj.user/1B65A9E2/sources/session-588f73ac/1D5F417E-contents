---
title: "Pima data"
author: "Aline Talhouk"
date: "2023-01-13"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## The PIMA dataset
For this example we will use the Pima dataset, included in the MASS library:

>A population of women who were at least 21 years old, of Pima Indian heritage and living near Phoenix, Arizona, was tested for diabetes according to World Health Organization criteria. The data were collected by the US National Institute of Diabetes and Digestive and Kidney Diseases. We used the 532 complete records after dropping the (mainly missing) data on serum insulin.

The dataset includes the following variables:


1	Number of times pregnant
2	Plasma glucose concentration (glucose tolerance test)
3	Diastolic blood pressure (mm Hg)
4	Triceps skin fold thickness (mm)
5	2-Hour serum insulin (mu U/ml)
6	Body mass index (weight in kg/(height in m)^2)
7	Diabetes pedigree function
8	Age (years)
9	Class variable (test for diabetes)

The outcome variable is type, indicating whether a person has diabetes. 

The data is split into a train and test set, which we will combine together.
```{r}
library(tidyverse)
library(gridExtra)
library(plotROC)
library(arm)
library(mlbench)
library(caret)
library(pROC)
data("PimaIndiansDiabetes")
# PimaIndiansDiabetes$glucose <- ifelse(PimaIndiansDiabetes$glucose ==  0, NA, PimaIndiansDiabetes$glucose)
# PimaIndiansDiabetes$pressure <- ifelse(PimaIndiansDiabetes$pressure ==  0, NA, PimaIndiansDiabetes$pressure)
# PimaIndiansDiabetes$triceps <- ifelse(PimaIndiansDiabetes$triceps ==  0, NA, PimaIndiansDiabetes$triceps)
# PimaIndiansDiabetes$triceps <- ifelse(PimaIndiansDiabetes$triceps == 99, NA, PimaIndiansDiabetes$triceps)
# PimaIndiansDiabetes$insulin <- ifelse(PimaIndiansDiabetes$insulin ==  0, NA, PimaIndiansDiabetes$insulin)
# PimaIndiansDiabetes$mass <- ifelse(PimaIndiansDiabetes$mass ==  0, NA, PimaIndiansDiabetes$mass)

set.seed(123)
train.index <- caret::createDataPartition(PimaIndiansDiabetes$diabetes, p = .8, list=FALSE)

train <- PimaIndiansDiabetes[ train.index,]
valid  <- PimaIndiansDiabetes[-train.index,]
table(train$diabetes)
table(valid$diabetes)

```
# Rpart

```{r}
library(rpart)
tree_mod <- rpart(
    formula = diabetes ~. ,
    data    = train,
    method  = "class"
)
tree_mod
```


```{r}
library(rpart.plot)
rpart.plot(tree_mod)

```
```{r}
plotcp(tree_mod)
tree_mod$cptable
```

CP is the complexity parameter.  ( y -axis is the CV error, lower  x-axis is the cost complexity (Î±) value, upper  x -axis is the number of terminal nodes (i.e., tree size =  |T|). We want to pick the value of CP from the table that corresponds to the minimum xerror value.
```{r}
cpt <- as.data.frame.matrix(tree_mod$cptable)
cpt_val <- cpt$CP[which.min(cpt$xerror)]
cpt_val
```
```{r}

tree_mod_opt <- prune(tree_mod, 
                           cp = cpt_val)
rpart.plot(tree_mod_opt)

```
```{r}
pred <- predict(object = tree_mod_opt,   # model object 
                newdata = valid,
                type="class")  # test dataset
caret::confusionMatrix(pred,valid$diabetes)
```


```{r}
caret_tree <- train(
  diabetes ~ .,
  data = train,
  method = "rpart",
  metric ="ROC",
  trControl = trainControl(method = "cv", number = 5,
                           classProbs = T, summaryFunction = twoClassSummary),
  tuneLength = 20
)
ggplot(caret_tree)
```

# Bagging
```{r}
# make bootstrapping reproducible
set.seed(123)

# train bagged model
tree_bag1 <- ipred::bagging(
  formula = diabetes ~ .,
  data = train,
  nbagg = 100,  
  coob = TRUE
  )

tree_bag1


```
```{r}
#Can also fit with caret
library(rpart)
caret_bag <- train(
  diabetes ~ .,
  data = train,
  method = "treebag",
  trControl = trainControl(method = "cv", number = 5,
                           classProbs = T, summaryFunction = twoClassSummary),
  metric ="ROC",
  nbagg = 20,  
  control = rpart.control(minsplit = 2, cp = 0)
)
caret_bag
```
```{r}
vip::vip(caret_bag)
```
# Random Forest
```{r}
library(randomForest)
# Train a Random Forest
set.seed(1)  # for reproducibility
rf_model <- randomForest(formula = diabetes ~ ., 
                             data = train)
                             
# Print the model output                             
print(rf_model)
```
```{r}
plot(rf_model)
```
```{r}
rf_pred <- predict(rf_model,
                   newdata = valid, type="class")
caret::confusionMatrix(rf_pred, valid$diabetes)
```

```{r}
#Can also fit with caret
set.seed(123)
caret_rf <- train(
  diabetes ~ .,
  data = train,                         
  method = "ranger",
  metric = "ROC",
  trControl = trainControl(method = "cv", number = 5, classProbs = TRUE, summaryFunction = twoClassSummary),
  importance="impurity"
)
```

```{r}
vip::vip(caret_rf)
```
# XGboost

```{r}
set.seed(123)
xgb_grid_1  <-  expand.grid(
                  nrounds = 50,
                  eta = c(0.03),
                  max_depth = 1,
                  gamma = 0,
                  colsample_bytree = 0.6,
                  min_child_weight = 1,
                  subsample = 0.5
                )

caret_xgb <- caret::train(diabetes ~., data = train,
                         method = "xgbTree",
                         metric = "ROC",
                         tuneGrid=xgb_grid_1,
                         trControl = trainControl(method = "cv", number = 5,
                                                  classProbs = T, summaryFunction = twoClassSummary),
                         preProcess = c("center","scale","pca"))
caret_xgb
```


```{r}
model_list <- list(Random_Forest = caret_rf, XGBoost = caret_xgb, Rpart_DT = caret_tree, Bagging = caret_bag)
resamples <- resamples(model_list)

#box plot
bwplot(resamples, metric="ROC")
```
```{r}
dotplot(resamples, metric="ROC")

```
```{r}
# prediction on Test data set
pred_rf <- predict(caret_rf, valid)

# Confusion Matrix 
cm_rf <- confusionMatrix(pred_rf, valid$diabetes, positive="pos")

# Prediction Probabilities
pred_prob_rf <- predict(caret_rf, valid, type="prob")

# ROC value
roc_rf <- pROC::roc(valid$diabetes, pred_prob_rf$pos)

# Confusion Matrix for Random Forest Model
cm_rf
```

```{r}
roc_rf
```

```{r}
```


```{r}
caTools::colAUC(pred_prob_rf$pos, valid$diabetes, plotROC = T)

```

```{r}

# prediction on Test data set
pred_xgb <- predict(caret_xgb, valid)
# Confusion Matrix 
cm_xgb <- confusionMatrix(pred_xgb, valid$diabetes, positive="pos")

# Prediction Probabilities
pred_prob_xgb <- predict(caret_xgb, valid, type="prob")
# ROC value
roc_xgb <- pROC::roc(valid$diabetes, pred_prob_xgb$pos)

# Confusion matrix 
cm_xgb
```
```{r}
roc_xgb
```
```{r}
caTools::colAUC(pred_prob_xgb$pos, valid$diabetes, plotROC = T)

```
```{r}
result_rf <- c(cm_rf$byClass['Sensitivity'], cm_rf$byClass['Specificity'], cm_rf$byClass['Precision'], 
               cm_rf$byClass['Recall'], cm_rf$byClass['F1'], roc_rf$auc)

result_xgb <- c(cm_xgb$byClass['Sensitivity'], cm_xgb$byClass['Specificity'], cm_xgb$byClass['Precision'], 
               cm_xgb$byClass['Recall'], cm_xgb$byClass['F1'], roc_xgb$auc)
all_results <- data.frame(rbind(result_rf, result_xgb))
all_results
```

